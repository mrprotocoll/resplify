<?php

namespace Tests\Feature;

use App\Models\Role;
use App\Models\User;
use Database\Seeders\RoleSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class StoreRoleTest extends TestCase
{
    use RefreshDatabase;

    private User $admin;
    private User $user;

    /**
     * setup global variables or methods
     * @return void
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed(RoleSeeder::class);
        $this->admin = User::factory()->create();
        $this->user = User::factory()->create();
        $this->admin->roles()->attach(Role::where('name', 'admin')->first());
        $this->user->roles()->attach(Role::where('name','!=', 'admin')->first());
    }

    public function test_that_name_is_not_empty(): void
    {
        $data = [
            'name' => ''
        ];

        $response = $this->actingAs($this->admin)->postJson('/api/v1/admin/roles', $data);

        $response->assertStatus(422);
    }

    /**
     * A basic feature test example.
     */
    public function test_admin_to_create_new_role(): void
    {
        $data = [
            'name' => fake()->name
        ];

        $response = $this->actingAs($this->admin)->postJson('/api/v1/admin/roles', $data);

        // 201 status
        $response->assertStatus(201);
        $this->assertDatabaseHas('roles', $data);
    }

    public function test_other_authenticated_user_except_admin_cannot_add_role(): void
    {

        $response = $this->actingAs($this->user)->post('/api/v1/admin/roles',[
            'name' => fake()->name
        ]);

        $response->assertStatus(403);
    }

    public function test_public_user_cannot_add_role(): void
    {
        $response = $this->postJson('/api/v1/admin/roles', [
            'name' => fake()->name
        ]);

        $response->assertStatus(401);
    }
}
