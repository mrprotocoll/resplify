<?php

namespace Tests\Feature\Resume;

use App\Enums\ReviewStatusEnum;
use App\Helpers\FileHelper;
use App\Models\Role;
use App\Models\User;
use Database\Seeders\RoleSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

class StoreResumeTest extends TestCase
{
    use RefreshDatabase;

    private User $user;
    private string $url = '/api/v1/resumes';
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed(RoleSeeder::class);
        $this->user = User::factory()->create();
        $this->user->roles()->attach(Role::get(ReviewStatusEnum::USER));
    }

    public function test_resume_is_stored_and_uploaded(): void {
        Storage::fake('resumes'); // Use the "resume" disk for file mocking
        $resume = UploadedFile::fake()->create('resume.pdf', 50);
        $request = [
            'resumes' => [$resume],
        ];

        $response = $this->actingAs($this->user)->postJson($this->url, $request);

        // assert that file is uploaded
        $response->assertStatus(201);
        // assert that file is stored in disk
        Storage::disk("public")->assertExists('resumes/'.FileHelper::formatName('resume.pdf'));
    }

    public function test_resume_input_must_be_an_array(): void {
        $resume = UploadedFile::fake()->create('resume.pdf', 50);
        $request = [
            'resumes' => $resume,
        ];

        $response = $this->actingAs($this->user)->postJson($this->url, $request);

        // assert that resume must be an array of resumes
        $response->assertStatus(422);
    }

    public function test_resume_input_must_not_be_empty(): void {
        $request = [
            'resumes' => '',
        ];

        $response = $this->actingAs($this->user)->postJson($this->url, $request);

        // assert that the rÃ©sumÃ© must not be empty
        $response->assertStatus(422);
    }


    public function test_public_users_cannot_create_resume(): void
    {
        $response = $this->getJson($this->url);

        $response->assertStatus(401);
    }
}
