<?php

namespace Tests\Feature\Users;

use App\Enums\RoleEnum;
use App\Models\Admin;
use App\Models\Role;
use App\Models\User;
use Database\Seeders\RoleSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ShowUsersTest extends TestCase
{
    use RefreshDatabase;
    private Admin $admin;
    private User $user;


    private String $url;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed(RoleSeeder::class);
        $this->admin = Admin::factory()->create();
        $this->user = User::factory()->create();
        $this->url = '/api/v1/admin/users/'.$this->user->id;
        $this->user->roles()->attach(Role::get(RoleEnum::USER));
    }

    // test that response shows the user that owns the id passed
    public function test_get_user_by_id() {
        $response = $this->actingAs($this->admin)->get($this->url);

        $response->assertStatus(200);
        $response->assertJsonFragment(['id' => $this->user->id]);
        $response->assertJsonMissing(['email' => $this->admin->email]);
    }

    // test that response gets data of the currently logged-in user
    public function test_get_currently_logged_in_user() {
        $response = $this->actingAs($this->user)->get('/api/v1/me');

        $response->assertStatus(200);
        $response->assertJsonFragment(['id' => $this->user->id]);
    }

    // test that only admin can get users by ID
    public function test_only_admin_can_get_user_by_id(): void
    {
        $response = $this->actingAs($this->user)->get($this->url);

        // 200 status
        $response->assertStatus(403);
    }

    // test that public users cannot access the endpoint
    public function test_public_users_cannot_get_user_by_id(): void
    {
        $response = $this->getJson($this->url);

        $response->assertStatus(401);
    }

    public function test_public_users_cannot_get_currently_logged_in_user(): void
    {
        $response = $this->getJson('/api/v1/me');

        $response->assertStatus(401);
    }

}
